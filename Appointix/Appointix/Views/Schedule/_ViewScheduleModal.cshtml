@model IEnumerable<Appointix.Models.Schedule>

<div class="row">
    @if (!Model.Any())
    {
        <div class="col-12 text-muted text-center">No schedules available for this day.</div>
    }
    else
    {
        foreach (var schedule in Model)
        {
            var statusText = schedule.IsBooked ? "Booked" : "Available";
            var statusColor = schedule.IsBooked ? "text-danger" : "text-success";

            <div class="col-md-6 mb-4">
                <div class="card shadow-sm border border-primary">
                    <div class="card-body">
                        <h5 class="card-title @statusColor">@statusText</h5>
                        <p class="card-text">
                            <strong>Date:</strong> @schedule.Date.ToString("yyyy-MM-dd")<br />
                            <strong>From:</strong> @schedule.ScheduleStartTime.ToString("g")<br />
                            <strong>To:</strong> @schedule.ScheduleEndTime.ToString("g")<br />
                            @if (!string.IsNullOrEmpty(schedule.Note))
                            {
                                <strong>Note:</strong> @schedule.Note
                            }
                        </p>
                        <div class="d-flex justify-content-end gap-2">
                            <button class="btn btn-sm btn-outline-primary edit-schedule-btn" data-id="@schedule.ScheduleId" title="Edit">
                                <i class="bi bi-pencil"></i> Edit
                            </button>

                            <button class="btn btn-sm btn-outline-danger" title="Delete"
                                    onclick="confirmDelete(@schedule.ScheduleId)">
                                <i class="bi bi-trash"></i> Delete
                            </button>

                            @* Book Appointment Button *@
                            @if (!schedule.IsBooked)
                            {
                                <button class="btn btn-sm btn-outline-success book-appointment-btn" 
                                        data-scheduleid="@schedule.ScheduleId"
                                        title="Book Appointment">
                                    <i class="bi bi-calendar-check"></i> Book Appointment
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-danger">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteConfirmationLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this schedule?
            </div>
            <div class="modal-footer">
                <form id="deleteForm" method="post">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Yes, Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

@await Html.PartialAsync("~/Views/Appointment/Partials/_BookAppointmentModal.cshtml")
@await Html.PartialAsync("_EditScheduleModal") <!-- your edit modal -->

@section Scripts {
    <script>
        // Delete Confirmation
        function confirmDelete(scheduleId) {
            const form = document.getElementById("deleteForm");
            form.action = '/Schedule/DeleteSchedule/' + scheduleId;
            const modal = new bootstrap.Modal(document.getElementById('deleteConfirmationModal'));
            modal.show();
        }

        // Edit Schedule button click
        $(document).on('click', '.edit-schedule-btn', function () {
            var scheduleId = $(this).data('id');
            $.ajax({
                url: '/Schedule/Edit',
                type: 'GET',
                data: { scheduleId: scheduleId },
                success: function (html) {
                    $('#editScheduleModalContent').html(html);
                    var editModal = new bootstrap.Modal(document.getElementById('editScheduleModal'));
                    editModal.show();
                },
                error: function () {
                    alert('Failed to load schedule for editing.');
                }
            });
        });

        // Book Appointment button click
        $(document).on('click', '.book-appointment-btn', function () {
            var scheduleId = $(this).data('scheduleid');

            // Set scheduleId to hidden input in modal
            $('#scheduleIdInput').val(scheduleId);

            // Set logged-in user's name and email (replace these with server rendered or JS vars)
            var userName = '@User.Identity.Name';  // change if needed
            var userEmail = '@User.FindFirst("email")?.Value'; // requires that claim; or pass server-side
            
            $('input[name="AppointeeName"]').val(userName);
            $('input[name="AppointeeEmail"]').val(userEmail);

            // Show booking modal
            var bookModal = new bootstrap.Modal(document.getElementById('bookAppointmentModal'));
            bookModal.show();
        });
    </script>
}
